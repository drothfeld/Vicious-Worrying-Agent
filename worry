; Vicious Worrying

(defdomain worry
  (
    ; The !eat operator increments the bio-level of the agent's hunger
    ; attribute by a random ranged amount. This also has the chance of
    ; lowering the agent's worry level.
    (:operator (!eat)
      ;preconditions
      (
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
        (assign ?rndHunger (call randomEat (?h)))
        (assign ?rndBladder (call randomEat (?b)))
        (assign ?rndWorry (call randomEat (?w)))
      )
      ;deleted
      (
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
      )
      ;added
      (
        (bio-level hunger me (call + ?h ?rndHunger))
        (bio-level bladder me (call - ?b ?rndBladder))
        (bio-level worry me (call - ?w ?rndWorry))
      )
    )

    ; The !use-bathroom operator increments the bio-level of the agent's bladder
    ; attribute by a random ranged amount. This also has the chance of
    ; slightly lowering the agent's worry level.
    (:operator (!use-bathroom)
      ;preconditions
      (
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (assign ?rndWorry (call randomWorry (?w)))
        (assign ?rndHunger (call randomWorry (?h)))
      )
      ;deleted
      (
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
      )
      ;added
      (
        (bio-level bladder me 100)
        (bio-level worry me (call - ?w ?rndWorry))
        (bio-level hunger me (call - ?h ?rndHunger))
      )
    )

    ; The !sleep operator increments the bio-level of the agent's energy
    ; attribute by a random ranged amount. This also has the chance of
    ; greatly lowering/zeroing the agent's worry level.
    (:operator (!sleep)
      ;preconditions
      (
        (bio-level energy me ?e)
        (bio-level worry me ?w)
      )
      ;deleted
      (
        (bio-level energy me ?e)
        (bio-level worry me ?w)
      )
      ;added
      (
        (bio-level energy me 100)
        (bio-level worry me 0)
      )
    )

    ; The !end-worry operator pulls the agent out of its misery and
    ; ends the program.
    (:operator (!end-worry)
      ;preconditions
      (
        (bio-level worry me ?w)
        (call < ?w 1)
      )
      ;deleted
      ()
      ;added
      ()
    )

    ; The !worry operator continues the vicious cycle of worrying. This lowers
    ; the other bio-levels of the agent.
    (:operator (!worry-about ?subject ?event)
      ;preconditions
      (
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level energy me ?e)
        (bio-level bladder me ?b)
        (assign ?rndWorry (call randomWorry (?w)))
        (assign ?rndHunger (call randomWorry (?h)))
        (assign ?rndEnergy (call randomEnergy (?e)))
        (assign ?rndBladder (call randomWorry (?b)))
      )
      ;deleted
      (
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level energy me ?e)
        (bio-level bladder me ?b)
      )
      ;added
      (
        (bio-level worry me (call + ?w ?rndWorry))
        (bio-level hunger me (call - ?h ?rndHunger))
        (bio-level energy me (call - ?e ?rndEnergy))
        (bio-level bladder me (call - ?b ?rndBladder))
      )
    )

    ; In this operator the agent is worrying about the notion that it is worrying,
    ; hence the vicious cycle.
    (:operator (!worry-about-worrying-about)
      ;preconditions
      (
        (bio-level worry me ?w)
        (assign ?rndWorry (call randomWorry (?w)))
      )
      ;deleted
      (
        (bio-level worry me ?w)
      )
      ;added
      (
        (bio-level worry me (call + ?w ?rndWorry))
      )
    )

    ; If the agent's worry state reaches a critical high level, the
    ; agent will decide it can no longer live in such a worrisome state
    ; and end it all. RIP
    (:operator (!end-it-all)
      ;preconditions
      (
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level energy me ?e)
      )
      ;deleted
      (
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level energy me ?e)
      )
      ;added
      (
        (bio-level worry me 0)
        (bio-level hunger me 0)
        (bio-level bladder me 0)
        (bio-level energy me 0)
      )
    )

    ; The goal method that is called from problem. The agent will be successful
    ; when it stops its vicious worrying.
    (:method (stop-worrying)
      ;preconditions for branch-1
      (
        (bio-level worry me ?w)
        (call < ?w 1)
      )
      ;steps for branch-1
      (
        (!end-worry)
      )

      ;preconditions for branch-2
      ()
      ;steps for branch-2
      (
        (begin-worrying)
      )
    )

    ; Called from the starting method. This method contains
    ; the core logic of the worry cycle.

    (:method (begin-worrying)
      ;preconditions for branch-1
      ()
      ;steps for branch-1
      (
        (check-bio-levels)
        (meta-worrying)
        (stop-worrying)
      )
    )

    ; This method checks the agent's bio levels, and addresses its needs in a
    ; logical fashion. The agent will always use the bathroom first if its
    ; bladder is full. If its bladder is alright but the agent is hungry, it
    ; will then eat. If the agent is completely out of energy, is well fed, and
    ; doesn't need to go to the bathroom, then it will go to bed.
    (:method (check-bio-levels)
      ;preconditions for branch-1
      (
        (bio-level bladder me ?b)
        (call <= ?b 15)
      )
      ;steps for branch-1
      (
        (!use-bathroom)
      )

      ;preconditions for branch-2
      (
        (bio-level hunger me ?h)
        (call <= ?h 25)
      )
      ;steps for branch-2
      (
        (!eat)
      )

      ;preconditions for branch-3
      (
        (bio-level energy me ?e)
        (call <= ?e 5)
      )
      ;steps for branch-3
      (
        (!sleep)
      )

      ;preconditions for branch-4
      (
        (worry-memory me worry(?subject ?event))
      )
      ;steps for branch-4
      (
        (analyze-worry-memory-subject worry(?subject ?event))
      )

      ;preconditions for branch-5
      ; NOTHING
      ()
      ;steps for branch-5
      ; NOTHING
      ()
    )

    ; This method checks how much the agent is currently worried and provides
    ; the potential for getting meta. The agent can worry about worrying,
    (:method (meta-worrying)
      ;preconditions for branch-1
      (
        (bio-level worry me ?w)
        (call > ?w 100)
      )
      ;steps for branch-1
      (
        (!end-it-all)
      )

      ;preconditions for branch-2
      (
        (bio-level worry me ?w)
        (call >= ?w 75)
        ;(worry-memory me ?memory)
      )
      ;steps for branch-2
      (
        ;(!worry-about-worrying-about)
        ;(analyze-worry-memory-subject ?memory)
      )

      ;preconditions for branch-3
      ; NOTHING
      ()
      ;steps for branch-3
      ; NOTHING
      ()
    )

    ; This method extrapolates the catalyst memory given by the user and
    ; determines possible additional worries this memory can trigger.
    (:method (analyze-worry-memory-subject worry(?subject ?event))
      ;preconditions for branch-1
      ; Vehicle is subject
      (
        (or
          (unify ?subject car)
          (unify ?subject train)
          (unify ?subject boat)
          (unify ?subject bike)
          (unify ?subject motorcycle)
          (unify ?subject automobile)
          (unify ?subject vehicle)
        )
      )
      ;steps for branch-1
      (
        (analyze-worry-memory-event-vehicle ?subject ?event)
      )

      ;preconditions for branch-X
      ; NOTHING
      ()
      ;steps for branch-X
      ; NOTHING
      ()
    )

    ; After determining which subject category the memory is from [VEHICLE],
    ; the event for that subject is analyzed to determine which new memory
    ; will be chained.
    (:method (analyze-worry-memory-event-vehicle ?subject ?event)
      ;preconditions for branch-1
      ; Destruction Negative Event (Extreme) -> Health
      ((or(unify ?event crash)(unify ?event accident)(unify ?event destroyed)(unify ?event explosion)(unify ?event fire)))
      ;steps for branch-1
      ((!worry-about ?subject ?event))

      ;preconditions for branch-2
      ; Personal Negative Event (Major) -> Money
      ((or(unify ?event ticket)(unify ?event stolen)(unify ?event smashed)(unify ?event dented)(unify ?event hit)(unify ?event broken)(unify ?event dead)(unify ?event missing)(unify ?event lost)(unify ?event impounded)(unify ?event towed)))
      ;steps for branch-2
      ((!worry-about ?subject ?event))

      ;preconditions for branch-3
      ; Petty Negative Event (Minor) -> Vanity
      ((or(unify ?event mileage)(unify ?event lifespan)(unify ?event appearance)(unify ?event old)(unify ?event ugly)(unify ?event loud)(unify ?event dirty)(unify ?event gross)(unify ?event clunky)(unify ?event age)(unify ?event oil)(unify ?event gas)))
      ;steps for branch-3
      ((!worry-about ?subject ?event))



    ;preconditions for branch-X
    ; NOTHING
    ()
    ;steps for branch-X
    ; NOTHING
    ()
  )

    ; Tests if two values are the same for memory assignment.
    (:- (unify ?x ?x) nil)

  )
)
