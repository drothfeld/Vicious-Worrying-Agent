; Vicious Worrying

(defdomain worry
  (
    ; The !eat operator increments the bio-level of the agent's hunger
    ; attribute by a random ranged amount. This also has the chance of
    ; lowering the agent's worry level.
    (:operator (!eat)
      ;preconditions
      (
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
        (assign ?rndHunger (call randomEat (?h)))
        (assign ?rndBladder (call randomEat (?b)))
        (assign ?rndWorry (call randomEat (?w)))
      )
      ;deleted
      (
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
      )
      ;added
      (
        (bio-level hunger me (call + ?h ?rndHunger))
        (bio-level bladder me (call - ?b ?rndBladder))
        (bio-level worry me (call - ?w ?rndWorry))
      )
    )

    ; The !use-bathroom operator increments the bio-level of the agent's bladder
    ; attribute by a random ranged amount. This also has the chance of
    ; slightly lowering the agent's worry level.
    (:operator (!use-bathroom)
      ;preconditions
      (
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (assign ?rndWorry (call randomWorry (?w)))
        (assign ?rndHunger (call randomWorry (?h)))
      )
      ;deleted
      (
        (bio-level bladder me ?b)
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
      )
      ;added
      (
        (bio-level bladder me 100)
        (bio-level worry me (call - ?w ?rndWorry))
        (bio-level hunger me (call - ?h ?rndHunger))
      )
    )

    ; The !sleep operator increments the bio-level of the agent's energy
    ; attribute by a random ranged amount. This also has the chance of
    ; greatly lowering/zeroing the agent's worry level.
    (:operator (!sleep)
      ;preconditions
      (
        (bio-level energy me ?e)
        (bio-level worry me ?w)
      )
      ;deleted
      (
        (bio-level energy me ?e)
        (bio-level worry me ?w)
      )
      ;added
      (
        (bio-level energy me 100)
        (bio-level worry me 0)
      )
    )

    ; The !end-worry operator pulls the agent out of its misery and
    ; ends the program.
    (:operator (!end-worry)
      ;preconditions
      (
        (bio-level worry me ?w)
        (call < ?w 1)
      )
      ;deleted
      ()
      ;added
      ()
    )

    ; This internal operator changes the memory the agent is worrying about based
    ; on how it was analyzed in analyze-worry-memory-subject and
    ; analyze-worry-memory-event-SUBJECT.
    (:operator (!think-about ?category)
      ;preconditions
      (
      )
      ;deleted
      (
      )
      ;added
      (
      )
    )

    ; The !worry operator continues the vicious cycle of worrying. This lowers
    ; the other bio-levels of the agent.
    (:operator (!worry-about ?subject ?event)
      ;preconditions
      (
        (worry-memory me worry(?oldSubject ?oldEvent))
        (system-flag-init-worry ?init)
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level energy me ?e)
        (bio-level bladder me ?b)
        (assign ?rndWorry (call randomWorry (?w)))
        (assign ?rndHunger (call randomWorry (?h)))
        (assign ?rndEnergy (call randomEnergy (?e)))
        (assign ?rndBladder (call randomWorry (?b)))
      )
      ;deleted
      (
        (worry-memory me worry(?oldSubject ?oldEvent))
        (system-flag-init-worry ?init)
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level energy me ?e)
        (bio-level bladder me ?b)
      )
      ;added
      (
        (worry-memory me worry(?subject ?event))
        (system-flag-init-worry 1)
        (bio-level worry me (call + ?w ?rndWorry))
        (bio-level hunger me (call - ?h ?rndHunger))
        (bio-level energy me (call - ?e ?rndEnergy))
        (bio-level bladder me (call - ?b ?rndBladder))
      )
    )

    ; In this operator the agent is worrying about the notion that it is worrying,
    ; hence the vicious cycle.
    (:operator (!worry-about-worrying-about ?subject ?event)
      ;preconditions
      (
        (bio-level worry me ?w)
        (assign ?rndWorry (call randomWorry (?w)))
      )
      ;deleted
      (
        (bio-level worry me ?w)
      )
      ;added
      (
        (bio-level worry me (call + ?w ?rndWorry))
      )
    )

    ; If the agent's worry state reaches a critical high level, the
    ; agent will decide it can no longer live in such a worrisome state
    ; and end it all. RIP
    (:operator (!end-it-all)
      ;preconditions
      (
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level energy me ?e)
      )
      ;deleted
      (
        (bio-level worry me ?w)
        (bio-level hunger me ?h)
        (bio-level bladder me ?b)
        (bio-level energy me ?e)
      )
      ;added
      (
        (bio-level worry me 0)
        (bio-level hunger me 0)
        (bio-level bladder me 0)
        (bio-level energy me 0)
      )
    )

    ; The goal method that is called from problem. The agent will be successful
    ; when it stops its vicious worrying.
    (:method (stop-worrying)
      ;preconditions for branch-1
      (
        (bio-level worry me ?w)
        (call < ?w 1)
      )
      ;steps for branch-1
      (
        (!end-worry)
      )

      ;preconditions for branch-2
      (
      )
      ;steps for branch-2
      (
        (begin-worrying)
      )
    )

    ; Called from the starting method. This method contains
    ; the core logic of the worry cycle.
    (:method (begin-worrying)
      ;preconditions for branch-1
      (
        (system-flag-init-worry ?init)
        (unify ?init 0)
        (worry-memory me worry(?subject ?event))
      )
      ;steps for branch-1
      (
        (!worry-about ?subject ?event)
        (check-bio-levels)
        (meta-worrying)
        (stop-worrying)
      )

      ;preconditions for branch-2
      ()
      ;steps for branch-2
      (
        (check-bio-levels)
        (meta-worrying)
        (stop-worrying)
      )
    )

    ; This method checks the agent's bio levels, and addresses its needs in a
    ; logical fashion. The agent will always use the bathroom first if its
    ; bladder is full. If its bladder is alright but the agent is hungry, it
    ; will then eat. If the agent is completely out of energy, is well fed, and
    ; doesn't need to go to the bathroom, then it will go to bed.
    (:method (check-bio-levels)
      ;preconditions for branch-1
      (
        (bio-level bladder me ?b)
        (call <= ?b 15)
      )
      ;steps for branch-1
      (
        (!use-bathroom)
      )

      ;preconditions for branch-2
      (
        (bio-level hunger me ?h)
        (self-conscious-level eating me ?sc)
        (worry-memory me worry(?subject ?event))
        (call <= ?h 25)
        (assign ?randomroll (call randomWorry (?h)))
      )
      ;steps for branch-2
      (
        (!eat)
        (eating-worry ?randomroll ?sc worry(?subject ?event))
      )

      ;preconditions for branch-3
      (
        (bio-level energy me ?e)
        (call <= ?e 5)
      )
      ;steps for branch-3
      (
        (!sleep)
      )

      ;preconditions for branch-4
      (
        (worry-memory me worry(?subject ?event))
      )
      ;steps for branch-4
      (
        (analyze-worry-memory-subject worry(?subject ?event))
      )

      ;preconditions for branch-5
      ; NOTHING
      ()
      ;steps for branch-5
      ; NOTHING
      ()
    )

    ; This method checks how much the agent is currently worried and provides
    ; the potential for getting meta. The agent can worry about worrying,
    (:method (meta-worrying)
      ;preconditions for branch-1
      (
        (bio-level worry me ?w)
        (self-conscious-level suicidal me ?s)
        (call > ?w ?s)
      )
      ;steps for branch-1
      (
        (!end-it-all)
      )

      ;preconditions for branch-2
      (
        (bio-level worry me ?w)
        (call >= ?w 75)
        (worry-memory me worry(?subject ?event))
      )
      ;steps for branch-2
      (
        ;(!worry-about-worrying-about ?subject ?event)
        ;(analyze-worry-memory-subject worry(?subject ?event))
      )

      ;preconditions for branch-3
      ; NOTHING
      ()
      ;steps for branch-3
      ; NOTHING
      ()
    )

    ; This method extrapolates the catalyst memory given by the user and
    ; determines possible additional worries this memory can trigger.
    (:method (analyze-worry-memory-subject worry(?subject ?event))
      ; VEHICLE is subject
      ((or(unify ?subject car)(unify ?subject driving)(unify ?subject train)(unify ?subject boat)(unify ?subject bike)(unify ?subject motorcycle)(unify ?subject automobile)(unify ?subject vehicle)(unify ?subject plane)(unify ?subject airplane)))
      ((analyze-worry-memory-event-vehicle ?subject ?event))

      ; RELATIONSHIP is subject
      ((or(unify ?subject relationship)(unify ?subject boyfriend)(unify ?subject girlfriend)(unify ?subject lover)(unify ?subject fiance)(unify ?subject wife)(unify ?subject husband)(unify ?subject friend)(unify ?subject sister)(unify ?subject brother)(unify ?subject sibling)(unify ?subject father)(unify ?subject mother)(unify ?subject daughter)(unify ?subject son)(unify ?subject child)(unify ?subject children)(unify ?subject family)(unify ?subject uncle)(unify ?subject aunt)(unify ?subject cousin)(unify ?subject date)(unify ?subject friends)(unify ?subject rival)(unify ?subject dad)(unify ?subject mom)(unify ?subject crush)(unify ?subject strangers)))
      ((analyze-worry-memory-event-relationship ?subject ?event))

      ; FINANCE is subject
      ((or(unify ?subject money)(unify ?subject funds)(unify ?subject bank)(unify ?subject account)(unify ?subject wallet)(unify ?subject creditcard)(unify ?subject debitcard)(unify ?subject visa)(unify ?subject mastercard)(unify ?subject checkings)(unify ?subject savings)(unify ?subject trust)(unify ?subject cash)(unify ?subject loans)(unify ?subject taxes)(unify ?subject finances)(unify ?subject credit)(unify ?subject mortgage)(unify ?subject tuition)(unify ?subject bill)(unify ?subject check)(unify ?subject bond)(unify ?subject epay)(unify ?subject selling)(unify ?subject buying)(unify ?subject applepay)(unify ?subject venmo)(unify ?subject paypal)(unify ?subject paycheck)(unify ?subject refund)(unify ?subject irs)(unify ?subject accountant)(unify ?subject subscription)(unify ?subject salary)(unify ?subject tip)(unify ?subject financial)(unify ?subject stock)(unify ?subject investment)))
      ((analyze-worry-memory-event-finance ?subject ?event))

      ; PERSONAL is subject
      ((or(unify ?subject personal)(unify ?subject my)(unify ?subject getting)(unify ?subject being)(unify ?subject becoming)(unify ?subject im)(unify ?subject catching)(unify ?subject losing)(unify ?subject giving)(unify ?subject hurting)(unify ?subject breaking)(unify ?subject feeling)(unify ?subject owning)(unify ?subject having)(unify ?subject trying)(unify ?subject my)(unify ?subject eating)(unify ?subject gaining)))
      ((analyze-worry-memory-event-personal ?subject ?event))

      ; ACADEMIC is subject
      ((or(unify ?subject math)(unify ?subject english)(unify ?subject spanish)(unify ?subject language)(unify ?subject writing)(unify ?subject science)(unify ?subject chemistry)(unify ?subject biology)(unify ?subject class)(unify ?subject course)(unify ?subject subject)(unify ?subject history)(unify ?subject teacher)(unify ?subject professor)(unify ?subject principal)(unify ?subject library)(unify ?subject classroom)(unify ?subject presentation)(unify ?subject test)(unify ?subject exam)(unify ?subject grade)(unify ?subject project)(unify ?subject gpa)(unify ?subject computerscience)(unify ?subject art)(unify ?subject midterm)(unify ?subject final)(unify ?subject school)(unify ?subject university)(unify ?subject sat)(unify ?subject gre)))
      ((analyze-worry-memory-event-academic ?subject ?event))

      ; NOTHING
      ()
      ((!think-about myself)(!worry-about personal happiness))
    )

    ; VEHICLE
    (:method (analyze-worry-memory-event-vehicle ?subject ?event)
      ; Destruction Negative Event (Extreme) -> Health
      ((assign ?memRoll (call memoryRoll (?subject)))
      (or(unify ?event crash)(unify ?event accident)(unify ?event destroyed)(unify ?event explosion)(unify ?event fire)(unify ?event terrorism)))
      ((vehicle-extreme ?memRoll vehicle ?subject ?event))

      ; Personal Negative Event (Major) -> Money
      ((assign ?memRoll (call memoryRoll (?subject)))
      (or(unify ?event ticket)(unify ?event stolen)(unify ?event smashed)(unify ?event dented)(unify ?event hit)(unify ?event broken)(unify ?event dead)(unify ?event missing)(unify ?event lost)(unify ?event impounded)(unify ?event towed)(unify ?event late)(unify ?event theft)(unify ?event robbery)(unify ?event insurance)))
      ((vehicle-major ?memRoll vehicle ?subject ?event))

      ; Petty Negative Event (Minor) -> Vanity
      ((assign ?memRoll (call memoryRoll (?subject)))
      (or(unify ?event mileage)(unify ?event lifespan)(unify ?event appearance)(unify ?event old)(unify ?event ugly)(unify ?event noise)(unify ?event dirty)(unify ?event gross)(unify ?event clunky)(unify ?event age)(unify ?event oil)(unify ?event gas)(unify ?event commute)))
      ((vehicle-minor ?memRoll vehicle ?subject ?event))

      ; NOTHING
      ()
      ((!think-about finances)(!worry-about money available))
  )

 ; VEHICLE - EXTREME
 (:method (vehicle-extreme ?randomroll ?topic ?subject ?event)
    ; First Possibility
    ((unify ?randomroll 1))
    ((!think-about others)(!worry-about everyone safe))

    ; Second Possibility
    ((unify ?randomroll 2))
    ((!think-about money)(!worry-about insurance amount))

    ; Third Possibility
    ((unify ?randomroll 3))
    ((!think-about mortality)(!worry-about getting killed))

    ; Fourth Possibility
    ((unify ?randomroll 4))
    ((!think-about transportation)(!worry-about school carpool))
)

; VEHICLE - MAJOR
(:method (vehicle-major ?randomroll ?topic ?subject ?event)
  ; First Possibility
  ((unify ?randomroll 1))
  ((!think-about finances)(!worry-about money available))

  ; Second Possibility
  ((unify ?randomroll 2))
  ((!think-about transportation)(!worry-about train commute))

  ; Third Possibility
  ((unify ?randomroll 3))
  ((!think-about emotions)(!worry-about getting upset))

  ; Fourth Possibility
  ((unify ?randomroll 4))
  ((!think-about finances)(!worry-about bill total))
)

; VEHICLE - MINOR
(:method (vehicle-minor ?randomroll ?topic ?subject ?event)
  ; First Possibility
  ((unify ?randomroll 1))
  ((!think-about vanity)(!worry-about personal appearance))

  ; Second Possibility
  ((unify ?randomroll 2))
  ((!think-about nothing)(!worry-about being bored))

  ; Third Possibility
  ((unify ?randomroll 3))
  ((!think-about money)(!worry-about cash status))

  ; Fourth Possibility
  ((unify ?randomroll 4))
  ((!think-about academics)(!worry-about school test))
)

  ; RELATIONSHIP
  (:method (analyze-worry-memory-event-relationship ?subject ?event)
    ; Destruction Negative Event (Extreme) -> Health
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event death)(unify ?event passed)(unify ?event tragedy)(unify ?event accident)(unify ?event emergency)))
    ((relationship-extreme ?memRoll relationship ?subject ?event))

    ; Personal Negative Event (Major) -> Money/Status
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event breakup)(unify ?event fight)(unify ?event argument)(unify ?event health)(unify ?event cheating)(unify ?event betray)(unify ?event lying)(unify ?event ignoring)(unify ?event yelling)(unify ?event angry)(unify ?event mad)(unify ?event upset)(unify ?event money)(unify ?event happiness)(unify ?event safety)))
    ((relationship-major ?memRoll relationship ?subject ?event))

    ; Petty Negative Event (Minor) -> Vanity
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event event)(unify ?event wedding)(unify ?event reunion)(unify ?event date)(unify ?event engagement)(unify ?event party)(unify ?event birthday)(unify ?event holiday)(unify ?event vacation)(unify ?event honeymoon)(unify ?event anniversary)))
    ((relationship-minor ?memRoll relationship ?subject ?event))

    ; NOTHING
    ()
    ((!think-about sadness)(!worry-about being alone))
  )

  ; RELATIONSHIP - EXTREME
  (:method (relationship-extreme ?randomroll ?topic ?subject ?event)
     ; First Possibility
     ((unify ?randomroll 1))
     ((!think-about others)(!worry-about family health))

     ; Second Possibility
     ((unify ?randomroll 2))
     ((!think-about parents)(!worry-about mom death))

     ; Third Possibility
     ((unify ?randomroll 3))
     ((!think-about parents)(!worry-about dad death))

     ; Fourth Possibility
     ((unify ?randomroll 4))
     ((!think-about sadness)(!worry-about becoming depressed))
 )

 ; RELATIONSHIP - MAJOR
 (:method (relationship-major ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about myself)(!worry-about personal happiness))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about failure)(!worry-about getting dumped))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about money)(!worry-about being poor))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about frustration)(!worry-about sibling argument))
 )

 ; RELATIONSHIP - MINOR
 (:method (relationship-minor ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about myself)(!worry-about personal hesitation))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about finances)(!worry-about payment overdue))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about academics)(!worry-about school test))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about health)(!worry-about getting sick))
 )

  ; FINANCE
  (:method (analyze-worry-memory-event-finance ?subject ?event)
    ; Destruction Negative Event (Extreme) -> Life Changing
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event hacked)(unify ?event stolen)(unify ?event robbed)(unify ?event empty)(unify ?event fraud)(unify ?event default)(unify ?event broke)(unify ?event bankrupt)))
    ((finance-extreme ?memRoll finance ?subject ?event))

    ; Personal Negative Event (Major) -> Difficult Situation
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event poor)(unify ?event due)(unify ?event payment)(unify ?event car)(unify ?event house)(unify ?event expired)(unify ?event pastdue)(unify ?event overdue)(unify ?event fee)(unify ?event frozen)(unify ?event charged)(unify ?event warning)(unify ?event error)(unify ?event available)(unify ?event amount)(unify ?event bill)(unify ?event tax)(unify ?event loans)))
    ((finance-major ?memRoll finance ?subject ?event))

    ; Petty Negative Event (Minor) -> Personal Inconvenience
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event stability)(unify ?event total)(unify ?event sum)(unify ?event status)(unify ?event investment)(unify ?event total)(unify ?event transaction)))
    ((finance-minor ?memRoll finance ?subject ?event))

    ; NOTHING
    ()
    ((!think-about finances)(!worry-about creditcard overdue))
  )

  ; FINANCE - EXTREME
  (:method (finance-extreme ?randomroll ?topic ?subject ?event)
     ; First Possibility
     ((unify ?randomroll 1))
     ((!think-about life)(!worry-about personal survival))

     ; Second Possibility
     ((unify ?randomroll 2))
     ((!think-about finances)(!worry-about savings hacked))

     ; Third Possibility
     ((unify ?randomroll 3))
     ((!think-about finances)(!worry-about bank frozen))

     ; Fourth Possibility
     ((unify ?randomroll 4))
     ((!think-about safety)(!worry-about being mugged))
 )

 ; FINANCE - MAJOR
 (:method (finance-major ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about finances)(!worry-about financial stability))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about money)(!worry-about check bouncing))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about finances)(!worry-about student loans))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about safety)(!worry-about becoming broke))
 )

 ; FINANCE - MINOR
 (:method (finance-minor ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about myself)(!worry-about personal stability))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about finances)(!worry-about school tuition))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about money)(!worry-about mortgage due))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about academics)(!worry-about school problems))
 )

  ; PERSONAL
  (:method (analyze-worry-memory-event-personal ?subject ?event)
    ; Huge Negative/Positive Event (Extreme) -> Life Changing
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event married)(unify ?event kids)(unify ?event arrested)(unify ?event killed)(unify ?event death)(unify ?event dead)(unify ?event cancer)(unify ?event aids)(unify ?event hiv)(unify ?event mugged)(unify ?event hospitalized)(unify ?event divorced)(unify ?event shot)(unify ?event stabbed)(unify ?event impaled)(unify ?event depressed)(unify ?event survival)))
    ((personal-extreme ?memRoll personal ?subject ?event))

    ; Internal/External Struggle (Major) -> Difficult Situation
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event poor)(unify ?event broke)(unify ?event sick)(unify ?event weight)(unify ?event fat)(unify ?event unsuccessful)(unify ?event health)(unify ?event happiness)(unify ?event flu)(unify ?event fever)(unify ?event love)(unify ?event dumped)(unify ?event fired)(unify ?event hurt)(unify ?event empty)(unify ?event old)(unify ?event weak)(unify ?event helpless)(unify ?event terrified)(unify ?event alone)(unify ?event insecure)))
    ((personal-major ?memRoll personal ?subject ?event))

    ; Petty Negative Event (Minor) -> Personal Inconvenience
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event cold)(unify ?event warm)(unify ?event sad)(unify ?event junk)(unify ?event happy)(unify ?event alot)(unify ?event hesitant)(unify ?event hesitation)(unify ?event upset)(unify ?event anger)(unify ?event angry)(unify ?event tired)))
    ((personal-minor ?memRoll personal ?subject ?event))

    ; NOTHING
    ()
    ((!think-about frustration)(!worry-about relationship argument))
  )

  ; PERSONAL - EXTREME
  (:method (personal-extreme ?randomroll ?topic ?subject ?event)
     ; First Possibility
     ((unify ?randomroll 1))
     ((!think-about safety)(!worry-about getting hurt))

     ; Second Possibility
     ((unify ?randomroll 2))
     ((!think-about future)(!worry-about having kids))

     ; Third Possibility
     ((unify ?randomroll 3))
     ((!think-about failing)(!worry-about being rejected))

     ; Fourth Possibility
     ((unify ?randomroll 4))
     ((!think-about failing)(!worry-about getting divorced))
 )

 ; PERSONAL - MAJOR
 (:method (personal-major ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about sorrow)(!worry-about becoming sad))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about sorrow)(!worry-about being happy))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about frustration)(!worry-about getting angry))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about death)(!worry-about family tragedy))
 )

 ; PERSONAL - MINOR
 (:method (personal-minor ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about death)(!worry-about friends death))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about others)(!worry-about family event))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about health)(!worry-about gaining weight))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about money)(!worry-about savings total))
 )

  ; ACADEMIC
  (:method (analyze-worry-memory-event-academic ?subject ?event)
    ; Huge Negative/Positive Event (Extreme) -> End of Academic Career
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event failed)(unify ?event failing)(unify ?event fail)(unify ?event suspended)(unify ?event expulsion)(unify ?event expelled)(unify ?event shooting)))
    ((academic-extreme ?memRoll personal ?subject ?event))

    ; Internal/External Struggle (Major) -> Difficult Situation
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event test)(unify ?event exam)(unify ?event midterm)(unify ?event final)(unify ?event difficulty)(unify ?event problems)(unify ?event struggle)(unify ?event score)(unify ?event grade)(unify ?event grades)(unify ?event carpool)(unify ?event tuition)))
    ((academic-major ?memRoll personal ?subject ?event))

    ; Petty Negative Event (Minor) -> Personal Inconvenience/Boredom
    ((assign ?memRoll (call memoryRoll (?subject)))
    (or(unify ?event class)(unify ?event course)(unify ?event teacher)(unify ?event professor)(unify ?event classroom)(unify ?event bored)(unify ?event boring)(unify ?event boredom)))
    ((academic-minor ?memRoll personal ?subject ?event))

    ; NOTHING
    ()
    ((!think-about finances)(!worry-about salary stability))
  )

  ; ACADEMIC - EXTREME
  (:method (academic-extreme ?randomroll ?topic ?subject ?event)
     ; First Possibility
     ((unify ?randomroll 1))
     ((!think-about failing)(!worry-about family disappointment))

     ; Second Possibility
     ((unify ?randomroll 2))
     ((!think-about failing)(!worry-about being unsuccessful))

     ; Third Possibility
     ((unify ?randomroll 3))
     ((!think-about finances)(!worry-about money saved))

     ; Fourth Possibility
     ((unify ?randomroll 4))
     ((!think-about failing)(!worry-about teacher disappointment))
 )

 ; ACADEMIC - MAJOR
 (:method (academic-major ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about safety)(!worry-about driving home))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about academics)(!worry-about class project))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about failing)(!worry-about getting help))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about sorrow)(!worry-about being happy))
 )

 ; ACADEMIC - MINOR
 (:method (academic-minor ?randomroll ?topic ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!think-about others)(!worry-about texting friend))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!think-about boredom)(!worry-about being lazy))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!think-about health)(!worry-about being tired))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!think-about academics)(!worry-about school difficulty))
 )

 ; EATING
 (:method (eating-worry ?randomroll ?eatingsensitivity worry(?subject ?event))
   ((call > ?randomroll ?eatingsensitivity)(assign ?memRoll (call memoryRoll (?randomroll))))
   ((eating-worry-memory ?memRoll ?subject ?event))

   ; NOTHING
   ()
   ()
 )

 (:method (eating-worry-memory ?randomroll ?subject ?event)
   ; First Possibility
   ((unify ?randomroll 1))
   ((!worry-about getting fat))

   ; Second Possibility
   ((unify ?randomroll 2))
   ((!worry-about eating alot))

   ; Third Possibility
   ((unify ?randomroll 3))
   ((!worry-about gaining weight))

   ; Fourth Possibility
   ((unify ?randomroll 4))
   ((!worry-about eating junk))
 )

    ; Tests if two values are the same for memory assignment.
    (:- (unify ?x ?x) nil)

  )
)
